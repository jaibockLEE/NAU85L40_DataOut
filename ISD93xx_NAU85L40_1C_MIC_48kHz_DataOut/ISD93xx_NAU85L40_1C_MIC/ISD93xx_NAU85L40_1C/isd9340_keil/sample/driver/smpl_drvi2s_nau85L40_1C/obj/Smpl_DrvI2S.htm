<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Smpl_DrvI2S.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Smpl_DrvI2S.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Nov 10 18:17:28 2016
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART_Callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ACMP_IRQHandler</a> from boot_isd93xx.o(i.ACMP_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from boot_isd93xx.o(i.ADC_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[10]">ALC_IRQHandler</a> from boot_isd93xx.o(i.ALC_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[b]">BOD_IRQHandler</a> from boot_isd93xx.o(i.BOD_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1e]">CAPS_IRQHandler</a> from boot_isd93xx.o(i.CAPS_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[17]">DPWM_IRQHandler</a> from boot_isd93xx.o(i.DPWM_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[12]">Default_IRQHandler</a> from boot_isd93xx.o(i.Default_IRQHandler) referenced 11 times from boot_isd93xx.o(vectors)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from drvgpio.o(i.EINT0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from drvgpio.o(i.EINT1_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[f]">GPAB_IRQHandler</a> from drvgpio.o(i.GPAB_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[19]">GPIO_IRQHandler</a> from boot_isd93xx.o(i.GPIO_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[7]">HardFault_Handler</a> from boot_isd93xx.o(i.HardFault_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from drvi2c.o(i.I2C0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1d]">I2S_IRQHandler</a> from drvi2s.o(i.I2S_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[6]">NMI_Handler</a> from boot_isd93xx.o(i.NMI_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1c]">PDMA_IRQHandler</a> from drvpdma.o(i.PDMA_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[11]">PWMA_IRQHandler</a> from boot_isd93xx.o(i.PWMA_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from boot_isd93xx.o(i.PendSV_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[20]">RTC_IRQHandler</a> from boot_isd93xx.o(i.RTC_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[25]">Reset_Handler</a> from boot_isd93xx.o(i.Reset_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[24]">Rx_thresholdCallbackfn</a> from smpl_drvi2s.o(i.Rx_thresholdCallbackfn) referenced from smpl_drvi2s.o(i.main)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from boot_isd93xx.o(i.SPI0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[8]">SVC_Handler</a> from boot_isd93xx.o(i.SVC_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from boot_isd93xx.o(i.SysTick_Handler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[1a]">TALARM_IRQHandler</a> from boot_isd93xx.o(i.TALARM_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from boot_isd93xx.o(i.TMR0_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from boot_isd93xx.o(i.TMR1_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[15]">UART02_IRQHandler</a> from drvuart.o(i.UART02_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[23]">UART_Callback</a> from smpl_drvi2s.o(i.UART_Callback) referenced from smpl_drvi2s.o(i.main)
 <LI><a href="#[c]">WDT_IRQHandler</a> from boot_isd93xx.o(i.WDT_IRQHandler) referenced from boot_isd93xx.o(vectors)
 <LI><a href="#[22]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[21]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[43]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[80]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[81]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[82]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[83]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[84]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[85]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[86]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[87]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[88]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[90]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[91]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[92]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[93]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[97]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[99]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[9b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[30]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[32]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[34]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[37]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[39]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9f]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Callback
</UL>

<P><STRONG><a name="[44]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[45]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2d]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2f]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a0]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_SetMCLK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_SetBCLK
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_Open
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetMCLK
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetBCLK
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetSampleRate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_GetUartCLk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_BaudRateCalculator
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetHCLK
</UL>

<P><STRONG><a name="[a3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3c]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3f]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[46]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[31]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[36]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>ACMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.ACMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>ALC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.ALC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.BOD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1e]"></a>CAPS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.CAPS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[17]"></a>DPWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.DPWM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[12]"></a>Default_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.Default_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[6a]"></a>Delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nau85l40setup.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU85L40_EnterADCandDACMode
</UL>

<P><STRONG><a name="[6f]"></a>DrvDPWM_Close</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_Close))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Callback
</UL>

<P><STRONG><a name="[67]"></a>DrvDPWM_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[6d]"></a>DrvDPWM_EnablePDMA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_EnablePDMA))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[64]"></a>DrvDPWM_Open</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_Open))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[65]"></a>DrvDPWM_SetDPWMClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_SetDPWMClk))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[66]"></a>DrvDPWM_SetFrequency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvdpwm.o(i.DrvDPWM_SetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[4c]"></a>DrvDPWM_SetSampleRate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drvdpwm.o(i.DrvDPWM_SetSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvDPWM_SetSampleRate &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
</UL>

<P><STRONG><a name="[76]"></a>DrvGPIO_I2C_PA10_PA11</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drvgpio.o(i.DrvGPIO_I2C_PA10_PA11))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>DrvGPIO_I2S_MCLK_PB1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drvgpio.o(i.DrvGPIO_I2S_MCLK_PB1))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>DrvGPIO_I2S_PA4_PA5_PA6_PA7</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, drvgpio.o(i.DrvGPIO_I2S_PA4_PA5_PA6_PA7))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>DrvGPIO_UART_TXRX_PA8_PA9</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drvgpio.o(i.DrvGPIO_UART_TXRX_PA8_PA9))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>DrvI2C_Ctrl</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, drvi2c.o(i.DrvI2C_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrvI2C_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU85L40_WriteData
</UL>

<P><STRONG><a name="[4f]"></a>DrvI2C_Open</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, drvi2c.o(i.DrvI2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvI2C_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>DrvI2S_EnableInt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drvi2s.o(i.DrvI2S_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvI2S_EnableInt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>DrvI2S_EnableMCLK</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvi2s.o(i.DrvI2S_EnableMCLK))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>DrvI2S_EnableRx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvi2s.o(i.DrvI2S_EnableRx))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Callback
</UL>

<P><STRONG><a name="[52]"></a>DrvI2S_GetBCLK</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drvi2s.o(i.DrvI2S_GetBCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrvI2S_GetBCLK &rArr; DrvI2S_GetSourceClock &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>DrvI2S_GetMCLK</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drvi2s.o(i.DrvI2S_GetMCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrvI2S_GetMCLK &rArr; DrvI2S_GetSourceClock &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>DrvI2S_GetSourceClock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drvi2s.o(i.DrvI2S_GetSourceClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DrvI2S_GetSourceClock &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_SetMCLK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_SetBCLK
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_Open
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetMCLK
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetBCLK
</UL>

<P><STRONG><a name="[55]"></a>DrvI2S_Open</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, drvi2s.o(i.DrvI2S_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DrvI2S_Open &rArr; DrvI2S_GetSourceClock &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>DrvI2S_SetBCLK</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drvi2s.o(i.DrvI2S_SetBCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrvI2S_SetBCLK &rArr; DrvI2S_GetSourceClock &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>DrvI2S_SetMCLK</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drvi2s.o(i.DrvI2S_SetMCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrvI2S_SetMCLK &rArr; DrvI2S_GetSourceClock &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClock
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>DrvPDMA_CHEnablelTransfer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_CHEnablelTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>DrvPDMA_CHSoftwareReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_CHSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Open
</UL>

<P><STRONG><a name="[79]"></a>DrvPDMA_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drvpdma.o(i.DrvPDMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>DrvPDMA_Open</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, drvpdma.o(i.DrvPDMA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvPDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_CHSoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[5a]"></a>DrvPDMA_SetCHForAPBDevice</STRONG> (Thumb, 480 bytes, Stack size 12 bytes, drvpdma.o(i.DrvPDMA_SetCHForAPBDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DrvPDMA_SetCHForAPBDevice &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
</UL>

<P><STRONG><a name="[4d]"></a>DrvSYS_GetHCLK</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, drvsys.o(i.DrvSYS_GetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetSourceClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetSampleRate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_GetUartCLk
</UL>

<P><STRONG><a name="[5b]"></a>DrvSYS_SetHCLK</STRONG> (Thumb, 982 bytes, Stack size 16 bytes, drvsys.o(i.DrvSYS_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvSYS_SetHCLK &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>DrvSYS_SetIPClockSource</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, drvsys.o(i.DrvSYS_SetIPClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvSYS_SetIPClockSource &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>DrvSYS_SetOscCtrl</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, drvsys.o(i.DrvSYS_SetOscCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvSYS_SetOscCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>DrvUART_BaudRateCalculator</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, drvuart.o(i.DrvUART_BaudRateCalculator))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvUART_BaudRateCalculator
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Open
</UL>

<P><STRONG><a name="[6e]"></a>DrvUART_ClearInt</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, drvuart.o(i.DrvUART_ClearInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvUART_ClearInt
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Callback
</UL>

<P><STRONG><a name="[5f]"></a>DrvUART_DisableInt</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drvuart.o(i.DrvUART_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvUART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Callback
</UL>

<P><STRONG><a name="[75]"></a>DrvUART_EnableInt</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, drvuart.o(i.DrvUART_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DrvUART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>DrvUART_GetUartCLk</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drvuart.o(i.DrvUART_GetUartCLk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvUART_GetUartCLk &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Open
</UL>

<P><STRONG><a name="[62]"></a>DrvUART_Open</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, drvuart.o(i.DrvUART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DrvUART_Open &rArr; DrvUART_GetUartCLk &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_GetUartCLk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_BaudRateCalculator
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvgpio.o(i.EINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvgpio.o(i.EINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EINT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>GPAB_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drvgpio.o(i.GPAB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPAB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[19]"></a>GPIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, drvi2c.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1d]"></a>I2S_IRQHandler</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, drvi2s.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[63]"></a>InitialDPWM</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, smpl_drvi2s.o(i.InitialDPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitialDPWM &rArr; DrvDPWM_SetSampleRate &rArr; DrvSYS_GetHCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetSampleRate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetFrequency
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_SetDPWMClk
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_Open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>LdoOn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, smpl_drvi2s.o(i.LdoOn))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>NAU85L40_EnterADCandDACMode</STRONG> (Thumb, 736 bytes, Stack size 8 bytes, nau85l40setup.o(i.NAU85L40_EnterADCandDACMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NAU85L40_EnterADCandDACMode &rArr; NAU85L40_WriteData &rArr; DrvI2C_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU85L40_WriteData
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>NAU85L40_WriteData</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, nau85l40setup.o(i.NAU85L40_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NAU85L40_WriteData &rArr; DrvI2C_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU85L40_EnterADCandDACMode
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[6c]"></a>PDMA1forDPWM</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, smpl_drvi2s.o(i.PDMA1forDPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PDMA1forDPWM &rArr; DrvPDMA_SetCHForAPBDevice &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_SetCHForAPBDevice
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Open
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_EnablePDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>PDMA_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, drvpdma.o(i.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>PWMA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.PWMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, boot_isd93xx.o(i.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Reset_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24]"></a>Rx_thresholdCallbackfn</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, smpl_drvi2s.o(i.Rx_thresholdCallbackfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rx_thresholdCallbackfn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_drvi2s.o(i.main)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[71]"></a>SendChar</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget.o(i.SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[1a]"></a>TALARM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.TALARM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.TMR1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[15]"></a>UART02_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drvuart.o(i.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART02_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[23]"></a>UART_Callback</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, smpl_drvi2s.o(i.UART_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART_Callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_ClearInt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableRx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvDPWM_Close
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpl_drvi2s.o(i.main)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> boot_isd93xx.o(vectors)
</UL>
<P><STRONG><a name="[51]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drvi2s.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetIPClockSource
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_SetCHForAPBDevice
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableInt
</UL>

<P><STRONG><a name="[49]"></a>__user_initial_stackheap</STRONG> (Thumb, 30 bytes, Stack size 36 bytes, boot_isd93xx.o(i.__user_initial_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3a]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boot_isd93xx.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[47]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[21]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, smpl_drvi2s.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAU85L40_EnterADCandDACMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_Open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_EnableInt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetOscCtrl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetIPClockSource
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_SetHCLK
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_GetHCLK
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvPDMA_CHEnablelTransfer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_SetMCLK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_SetBCLK
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_Open
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetMCLK
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_GetBCLK
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableRx
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableMCLK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2S_EnableInt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvI2C_Open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_UART_TXRX_PA8_PA9
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_I2S_PA4_PA5_PA6_PA7
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_I2S_MCLK_PB1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_I2C_PA10_PA11
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA1forDPWM
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LdoOn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialDPWM
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drvuart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvUART_DisableInt
</UL>

<P><STRONG><a name="[22]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3e]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
